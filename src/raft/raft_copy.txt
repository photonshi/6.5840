package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	//	"bytes"
	"fmt"
	"sync"
	"sync/atomic"
	"time"

	//	"6.5840/labgob"
	"math/rand"

	"6.5840/labrpc"
)

// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in part 2D you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh, but set CommandValid to false for these
// other uses.
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int

	// For 2D:
	SnapshotValid bool
	Snapshot      []byte
	SnapshotTerm  int
	SnapshotIndex int
}

type LogEntry struct {
	Command string // TODO what is the command type for state machine
	Term    int
	Index   int // first index is 1
}

type AppendEntriesRPC struct {
	Term         int
	LeaderID     int
	PrevLogIndex int
	PrevLogTerm  int
	Entries      []LogEntry
	LeaderCommit int
}

type AppendEntriesRPCReply struct {
	Term    int
	Success bool
}

// A Go object implementing a single Raft peer.
type Raft struct {
	Mu        sync.Mutex          // Lock to protect shared access to this peer's state
	Peers     []*labrpc.ClientEnd // RPC end points of all peers
	Persister *Persister          // Object to hold this peer's persisted state
	Me        int                 // this peer's index into peers[]
	Dead      int32               // set by Kill()
	State     string              // leader, follower, candidate

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	CurrentTerm int
	VotedFor    int // candidate id that received vote in the current term
	Log         []LogEntry

	// volatile state on all servers
	CommitIndex int // index of highest log entry known to be committed initial = 0 incerase monotonically
	LastApplied int // index of highest log entry applied to state machine initial = 0 incerase monotonically

	// volatile on leaders
	NextIndex  []int
	MatchIndex []int

	// timeout field
	ExpirationTime time.Time

	// maybe channel for sending appendIndix?
	// TODO what should be the type sent over the channel
	// AppendEntriesChannel []chan AppendEntriesRPC
}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {
	rf.Mu.Lock()
	defer rf.Mu.Unlock()
	// var term int
	// var isleader bool
	// Your code here (2A).
	return rf.CurrentTerm, rf.State == "leader"
}

// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
// before you've implemented snapshots, you should pass nil as the
// second argument to persister.Save().
// after you've implemented snapshots, pass the current snapshot
// (or nil if there's not yet a snapshot).
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// e := labgob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// raftstate := w.Bytes()
	// rf.persister.Save(raftstate, nil)
}

// restore previously persisted state.
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
}

// the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
func (rf *Raft) Snapshot(index int, snapshot []byte) {
	// Your code here (2D).

}

// example RequestVote RPC arguments structure.
// field names must start with capital letters!
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	Term         int
	CandidateID  int
	LastLogIndex int
	LastLogTerm  int
}

// example RequestVote RPC reply structure.
// field names must start with capital letters!
type RequestVoteReply struct {
	// Your data here (2A).
	Term        int
	VoteGranted bool
}

// example RequestVote RPC handler.
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
	// 1. Reply false if term < currentTerm (§5.1)
	// 2. If votedFor is null or candidateId, and candidate’s log is at
	// least as up-to-date as receiver’s log, grant vote (§5.2, §5.4)
	rf.Mu.Lock()
	defer rf.Mu.Unlock()

	reply.Term = rf.CurrentTerm
	reply.VoteGranted = false

	// TODO check if reply false if term < currentTerm 5.1
	if args.Term < rf.CurrentTerm {
		fmt.Printf("args term < current term \n")
	} else if args.Term > rf.CurrentTerm {
		rf.CurrentTerm = args.Term
		rf.VotedFor = -1
	}

	// grant vote if
	// votedFor is nul or candidateID, and
	// candidate's log is at least as up to date as receiver's log
	// TODO how to set rf.VotedFor as null?
	if rf.VotedFor == -1 || rf.VotedFor == args.CandidateID {
		// if args.LastLogTerm >= len(rf.Log) {
		reply.VoteGranted = true
		// }
	}

}

func (rf *Raft) PerpetualHeartBeat(term int) {
	// helpfer funtion that calls CallHeartBeat
	// sends heartbeat as long as current term is the same as input term and i am the leader
	// fmt.Printf("locked in perpetual heartbeat line 216 \n")
	rf.Mu.Lock()

	for term == rf.CurrentTerm && rf.State == "leader" {
		// fmt.Printf("unlocked in perpetual heartbeat line 220")
		rf.Mu.Unlock()

		rf.CallHeartBeat()

		// set time out and then sleep
		// ms := 50 + (rand.Int63() % 300)
		time.Sleep(100 * time.Millisecond)
		// fmt.Printf("locked in perpetual heartbeat line 227 \n")
		rf.Mu.Lock()

	}
	rf.Mu.Unlock()
}

func (rf *Raft) CallHeartBeat() {
	// leader sends heartbeat with empty fields as heartbeat messages
	// fmt.Printf("locked in send heartbeat line 236 \n")
	rf.Mu.Lock()

	// // check all volatile terms
	// if args.Term != rf.CurrentTerm || args.PrevLogIndex < rf.CommitIndex {
	// 	fmt.Printf("Terms or commit indices do not match in append entries")
	// 	os.Exit(1)
	// }

	if rf.State != "leader" {
		fmt.Printf("%v not leader yet attempting to send appeadentries", rf.Me)
		// fmt.Printf("unlocked in call heartbeat line 247 \n")
		rf.Mu.Unlock()

		return
	}

	// send heartbeat to all servers
	for server := range rf.Peers {
		if server != rf.Me {

			heartBeat := AppendEntriesRPC{}
			heartBeat.Entries = []LogEntry{}
			heartBeat.Term = rf.CurrentTerm
			heartBeat.LeaderID = rf.Me
			heartBeat.PrevLogIndex = rf.CommitIndex - 1
			heartBeat.PrevLogTerm = rf.CurrentTerm - 1 //TODO how do I do this
			heartBeat.LeaderCommit = rf.CommitIndex    // TODO what should leader commit be?
			// fmt.Printf("unlocked in call heartbeat line 264 \n")
			// rf.Mu.Unlock()

			output := AppendEntriesRPCReply{}
			go rf.SendAppendEntries(server, &heartBeat, &output)
		}
	}
	rf.Mu.Unlock()

}

func (rf *Raft) AppendEntries(args *AppendEntriesRPC, reply *AppendEntriesRPCReply) {
	// function handler for appendEntries rpc
	// 2A
	// resets election timeout so other servers don't step forward as leader when one has already been elected
	rf.Mu.Lock()
	defer rf.Mu.Unlock()

	reply.Success = false
	reply.Term = rf.CurrentTerm

	// update expiration
	min := 400
	max := 1100
	random_timeout := rand.Intn(max-min) + min
	timeFrame := time.Duration(random_timeout) * time.Millisecond
	rf.ExpirationTime = time.Now().Add(timeFrame)

	// 1. reply false if term < currentTerm
	// 2. Reply false if log doesnt contain an entry at prevLogIndex whose term matches prevLogTerm
	// 3. If an existing entry conflicts with a new one (same index
	// but different terms), delete the existing entry and all that
	// follow it (§5.3)

	// 4. Append any new entries not already in the log
	// 5. If leaderCommit > commitIndex, set commitIndex =
	// min(leaderCommit, index of last new entry)

	// TODO verify this implementation in OH
	if args.Term >= rf.CurrentTerm {
		// log contains entry at prevLogIndex whose term matches prevLogTerm
		reply.Success = true
		rf.State = "follower" // convert to follower

		// TODO 2B
		// ISSUE 2B: what's the difference between prevlogindex and prevlogterm
		// match_term := args.Entries[args.PrevLogIndex].Term
		// if match_term == args.PrevLogTerm {
		// 	reply.Success = true
		// }

	}
}

func (rf *Raft) SendAppendEntries(server int, args *AppendEntriesRPC, reply *AppendEntriesRPCReply) {
	ok := rf.Peers[server].Call("Raft.AppendEntries", args, reply)
	if ok {
		fmt.Printf("successfully sent heartbeat in 2A. %v is leader \n", rf.Me)
	}
}

// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
func (rf *Raft) sendRequestVote(server int, sumVoteGranted *int, args *RequestVoteArgs, reply *RequestVoteReply) {
	// TODO create raft strcut for vote
	ok := rf.Peers[server].Call("Raft.RequestVote", args, reply)
	if ok {
		if reply.VoteGranted {
			// fmt.Printf("locked in sendREquestVOte line 358 \n")
			rf.Mu.Lock()

			*sumVoteGranted += 1
			if *sumVoteGranted > len(rf.Peers)/2 {
				if args.Term <= rf.CurrentTerm {

					rf.State = "leader"
					fmt.Printf("unlocked in sendREquestVOte line 366 \n")
					// rf.Mu.Unlock()

					go rf.PerpetualHeartBeat(rf.CurrentTerm)
				}
			}
			// fmt.Printf("unlocked in sendREquestVOte line 372 \n")
			rf.Mu.Unlock()

		}
	}
}

func (rf *Raft) sendLeaderElection(currentTerm int) {
	// function to periodically send requestVote rpcs when it hasnt heard from another peer for a while

	// TODO will deadlock occur with this locking scheme?
	// fmt.Printf("locked in leader election line 393 \n")
	fmt.Printf("current term: %v, raft instance id:%v, I voted for this:%v \n", rf.CurrentTerm, rf.Me, rf.VotedFor)
	rf.Mu.Lock()

	if rf.State != "candidate" || rf.killed() { // only candidates can send leader election notices
		fmt.Printf("1")
		rf.Mu.Unlock()
		return
	}

	if currentTerm < rf.CurrentTerm {
		fmt.Printf("2")
		rf.Mu.Unlock()
		return
	}

	if time.Now().After(rf.ExpirationTime) {
		fmt.Printf("3")
		rf.Mu.Unlock()
		return
	}

	sumVotes := 1
	input := RequestVoteArgs{}

	input.CandidateID = rf.Me
	input.Term = rf.CurrentTerm
	// input.LastLogIndex = len(rf.Log) - 1           // how to get that?
	// input.LastLogTerm = rf.Log[len(rf.Log)-1].Term // how to get that?
	// fmt.Printf("Unlocked in leader election line 426 \n")
	rf.Mu.Unlock()

	for server := range rf.Peers {

		if rf.Me != server {
			reply := RequestVoteReply{}
			go rf.sendRequestVote(server, &sumVotes, &input, &reply)
		}
	}

}

// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := rf.State == "leader"

	if rf.killed() {
		// return gracefully
		return index, term, isLeader
	}

	// Your code here (2B).
	// start begins agreement to be committed to the log
}

// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.Dead, 1)
	// Your code here, if desired.
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.Dead)
	return z == 1
}

func (rf *Raft) ticker() {
	for !rf.killed() {
		// Your code here (2A)
		// Check if a leader election should be started.

		// pause for a random amount of time between 50 and 350
		// milliseconds.
		// ms := 50 + (rand.Int63() % 300)
		// time.Sleep(time.Duration(ms) * time.Millisecond)
		time.Sleep(100 * time.Millisecond)
		// check if time of last heartbeat is within expiration time

		if time.Now().After(rf.ExpirationTime) { // if timer has expired
			// fmt.Printf("locked in ticker line 495 \n")
			rf.Mu.Lock()
			// invoke leader election
			rf.State = "candidate"
			rf.CurrentTerm += 1
			rf.VotedFor = rf.Me

			// TODO how do I reset election timeout
			// timeFrame := time.Duration(ms) * time.Microsecond
			min := 400
			max := 1100
			random_timeout := rand.Intn(max-min) + min
			timeFrame := time.Duration(random_timeout) * time.Millisecond
			rf.ExpirationTime = time.Now().Add(timeFrame)
			// fmt.Printf("unlocked in ticker line 509 \n")
			rf.Mu.Unlock()
			rf.sendLeaderElection(rf.CurrentTerm)
		}

	}
}

// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.Peers = peers
	rf.Persister = persister
	rf.Me = me

	// Your initialization code here (2A, 2B, 2C).
	// create backround gorountine that kick off leader election periodically
	// by sending out requestvote rpcs when it hasnt heard back in a while
	rf.CurrentTerm = 1
	rf.VotedFor = -1 // TODO initialize voted for as 0
	rf.Log = []LogEntry{}
	rf.CommitIndex = 0
	rf.LastApplied = 0
	rf.NextIndex = nil
	rf.MatchIndex = nil
	rf.State = "follower"
	// TODO revisit
	rf.ExpirationTime = time.Now()

	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())

	// start ticker goroutine to start elections
	go rf.ticker()

	return rf
}
